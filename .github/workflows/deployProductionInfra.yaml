name: AWS Infra Deploy v12

on:
  pull_request:
    branches: [ main ]

jobs:
  deploy-api-ec2-prod:
    name: deploy-api-ec2-prod 
    if: contains(github.event.pull_request.labels.*.name, 'deploy-back-api-production')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Deploy to EC2
        env:
          API_EC2_HOST: ${{ secrets.API_EC2_HOST }}
          SSH_KEY: ${{ secrets.API_SSH_PRIVATE_KEY }}
          DEST_PATH: '/home/ubuntu/dl/'
          APP_NAME: 'doughly'
        run: |
          # Install SSH Client (if not present)
          sudo apt-get update
          sudo apt-get install -y openssh-client

          # Setup SSH Key
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into the EC2 instance and run commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${API_EC2_HOST} << EOF
            # Stop the server using PM2
            pm2 stop ${APP_NAME} || true  # '|| true' to ignore if the app isn't found

            # Clean the directory
            if [ -n "${DEST_PATH}" ]; then
              rm -rf ${DEST_PATH}/*
            fi

            # Exit SSH session
          EOF

          # Rsync to EC2
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=~/.ssh/known_hosts" ./server/ ubuntu@${API_EC2_HOST}:${DEST_PATH}

          # SSH into the EC2 instance to restart the server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${API_EC2_HOST} << EOF
            # Navigate to the directory
            cd ${DEST_PATH}

            # Install dependencies
            npm install

            # Start the server using PM2
            pm2 start ../ecosystem.config.js

            # Save the PM2 process list to restart on server reboot
            pm2 save

            # Exit SSH session
          EOF

  deploy-frontend-to-s3:
    name: deploy-frontend-to-s3
    if: contains(github.event.pull_request.labels.*.name, 'deploy-front-production')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.4.0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: 20.x

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Install Node.js type definitions
        run: npm install --save-dev @types/node
        working-directory: ./frontend

      - name: Build Angular app
        run: ng build --configuration production
        working-directory: ./frontend

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to S3
        run: |
          aws s3 rm s3://doughly.co --recursive
          aws s3 sync ./frontend/dist/ s3://doughly.co 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Invalidate the cloudfront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E2Y7YH9KIYK07 --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2



