name: AWS Infra Deploy v14

on:
  pull_request:
    branches: [main]

jobs:
  deploy-api-ec2-prod:
    name: deploy-api-ec2-prod
    if: contains(github.event.pull_request.labels.*.name, 'deploy-back-api-production')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Deploy to EC2
        env:
          API_EC2_HOST: ${{ secrets.API_EC2_HOST }}
          SSH_KEY: ${{ secrets.API_SSH_PRIVATE_KEY }}
          DEST_PATH: '/home/ubuntu/dl/'
          APP_NAME: 'doughly'
        run: |
          # Install SSH Client (if not present)
          sudo apt-get update
          sudo apt-get install -y openssh-client

          # Setup SSH Key
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into the EC2 instance and run commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${API_EC2_HOST} << EOF
            # Stop the server using PM2
            pm2 stop ${APP_NAME} || true  # '|| true' to ignore if the app isn't found

            # Clean the directory
            if [ -n "${DEST_PATH}" ]; then
              rm -rf ${DEST_PATH}/*
            fi

            # Exit SSH session
          EOF

          # Rsync to EC2
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=~/.ssh/known_hosts" ./server/ ubuntu@${API_EC2_HOST}:${DEST_PATH}

          # SSH into the EC2 instance to restart the server
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${API_EC2_HOST} << EOF
            # Navigate to the directory
            cd ${DEST_PATH}

            # Clean and rebuild all node_modules
            rm -rf node_modules package-lock.json
            npm install
            sudo npx playwright install-deps

            # Export path to Google Service Account Credentials
            export GOOGLE_APPLICATION_CREDENTIALS="~/dl/services/google/doughly-ee4c38c0be84.json"
            
            # Start the server using PM2
            pm2 start ../ecosystem.config.js

            # Save the PM2 process list to restart on server reboot
            pm2 save

            # Exit SSH session
          EOF
      - name: Start Grafana Alloy Service
        env:
          API_EC2_HOST: ${{ secrets.API_EC2_HOST }}
          SSH_KEY: ${{ secrets.API_SSH_PRIVATE_KEY }}
        run: |
          # Install SSH Client (if not present)
          sudo apt-get update
          sudo apt-get install -y openssh-client

          # Setup SSH Key
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # SSH into the EC2 instance and run commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${API_EC2_HOST} << EOF
            # update gpg
            sudo apt install gpg

            # Import the GPG key and add the Grafana package repository.
            sudo mkdir -p /etc/apt/keyrings/
            wget -q -O - https://apt.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/grafana.gpg > /dev/null
            echo "deb [signed-by=/etc/apt/keyrings/grafana.gpg] https://apt.grafana.com stable main" | sudo tee /etc/apt/sources.list.d/grafana.list

            # Updata the Repos
            sudo apt-get update

            # Install Alloy
            sudo apt-get install alloy

            # Start the service
            sudo systemctl start alloy

            # Configure to start on boot
            sudo systemctl enable alloy.service

            # Copy Config file from /home/ubuntu to /etc/alloy
            sudo cp /home/ubuntu/dl/config.alloy /etc/alloy/config.alloy

            # Restart Alloy Service
            sudo systemctl restart alloy
          EOF

  deploy-loki-change:
    name: Deploy Loki Change
    if: contains(github.event.pull_request.labels.*.name, 'deploy-back-loki-change')
    runs-on: ubuntu-latest
    env:
      LOKI_EC2_HOST: ${{ secrets.LOKI_EC2_HOST }}
      SSH_KEY: ${{ secrets.API_SSH_PRIVATE_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Install SSH Client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
      - name: Ensure Correct Permissions on Loki Directory
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${LOKI_EC2_HOST} << EOF
            sudo mkdir -p /home/ubuntu/loki
            sudo chown -R ubuntu:ubuntu /home/ubuntu/loki
          EOF

      - name: Sync Loki Config and Restart Loki Container
        run: |
          # Sync the loki-config.yaml file to the EC2 instance
          rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" ./loki/loki-config.yaml ubuntu@${LOKI_EC2_HOST}:/home/ubuntu/loki/loki-config.yaml

          # SSH into the EC2 instance and restart the Loki container
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${LOKI_EC2_HOST} << EOF
            # Stop and remove the existing Loki container if running
            sudo docker stop loki || true
            sudo docker rm loki || true

            # Run the Loki Docker container with the updated configuration
            sudo docker run --name loki --restart unless-stopped -d -v /home/ubuntu/loki:/mnt/config -p 3100:3100 grafana/loki:3.0.0 -config.file=/mnt/config/loki-config.yaml

            # Verify the Loki container is running
            sudo docker ps
          EOF

  deploy-frontend-to-s3:
    name: deploy-frontend-to-s3
    if: contains(github.event.pull_request.labels.*.name, 'deploy-front-production')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.4.0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install dependencies
        run: npm ci
        working-directory: ./frontend

      - name: Install Node.js type definitions
        run: npm install --save-dev @types/node
        working-directory: ./frontend

      - name: Build Angular app
        run: ng build --configuration production
        working-directory: ./frontend

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to S3
        run: |
          aws s3 rm s3://doughly.co --recursive
          aws s3 sync ./frontend/dist/ s3://doughly.co
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Upload .well-known files
        run: |
          aws s3 cp ./frontend/assetlinks.json s3://doughly.co/.well-known/assetlinks.json
          aws s3 cp ./frontend/apple-app-site-association s3://doughly.co/.well-known/apple-app-site-association --content-type "application/json"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2

      - name: Invalidate the cloudfront cache
        run: |
          aws cloudfront create-invalidation --distribution-id E2Y7YH9KIYK07 --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
